/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.strangegrotto.clijournal;

import com.google.common.base.Stopwatch;
import com.google.common.collect.Sets;
import com.strangegrotto.clijournal.commands.CommandParser;
import com.strangegrotto.clijournal.commands.CommandResultMetadata;
import com.strangegrotto.clijournal.commands.CommandResultsRecord;
import com.strangegrotto.clijournal.commands.ResultReferenceTranslator;
import com.strangegrotto.clijournal.commands.verbs.*;
import com.strangegrotto.clijournal.entrystore.EntryStore;
import net.sourceforge.argparse4j.ArgumentParsers;
import net.sourceforge.argparse4j.inf.ArgumentParser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class Main {
    private static final String CONFIG_FILENAME = ".clijournal";
    private static Set<String> BLACKLISTED_FILENAME_PATTERNS = Sets.newHashSet(
            ".*\\.swp",
            "^\\.git"
    );

    public static void main(String[] args) throws IOException, InterruptedException {
        Path journalDirpath = getJourndalDirpath();
        // TODO handle this nicely???
        EntryStore entryStore = new EntryStore(journalDirpath, BLACKLISTED_FILENAME_PATTERNS);
        CommandResultsRecord resultsRecord = new CommandResultsRecord();
        ResultReferenceTranslator referenceTranslator = new ResultReferenceTranslator(resultsRecord);
        CommandParser commandParser = new CommandParser(resultsRecord).registerCommand(
                new ListEntriesCommand(entryStore)
        ).registerCommand(
                new ListTagsCommand(entryStore)
        ).registerCommand(
                new FindEntriesCommand(entryStore)
        ).registerCommand(
                new VimCommand(entryStore, referenceTranslator)
        ).registerCommand(
                new QuitCommand()
        );

        List<String> endArgs = runInputLoop(commandParser);
        if (endArgs.size() > 0) {
            Process process = new ProcessBuilder(endArgs).inheritIO().start();
            process.waitFor();
        }
    }

    private static List<String> runInputLoop(CommandParser commandParser) throws IOException {
        Optional<List<String>> endArgsOpt = Optional.empty();
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while (!endArgsOpt.isPresent()) {
            // TODO nicely catch ctrl-c and ctrl-d
            System.out.print("\n>> ");

            String userInput;
            userInput = reader.readLine();
            if (null == userInput) {
                endArgsOpt = Optional.of(List.of());
                break;
            }

            List<String> tokenizedInput = Arrays.asList(userInput.trim().split("\\s+"));
            if (tokenizedInput.size() == 0) {
                continue;
            }

            CommandResultMetadata cmdResult = commandParser.parse(tokenizedInput);

            endArgsOpt = cmdResult.getEndArgs();
        }
        return endArgsOpt.get();
    }


    // TODO Make this have a nice intro flow where the user can set the journal dirpath
    private static Path getJourndalDirpath() {
        // TODO Replace with reading/writing YAML
        String homeDirpath = System.getProperty("user.home");
        Path configFilepath = Paths.get(homeDirpath, CONFIG_FILENAME).toAbsolutePath();
        if (!Files.isRegularFile(configFilepath)) {
            // TODO implement giving the user a nice introduction and allow them to set journal dirpath!
            throw new RuntimeException("Setting journal dirpath not implemented yet!");
        }

        List<String> configLines;
        try {
            configLines = Files.readAllLines(configFilepath);
        } catch (IOException e) {
            // TODO implement giving the user a nice introduction and allow them to set journal dirpath!
            throw new RuntimeException("Failed to open config iflepath!");
        }
        if (configLines.size() == 0) {
            // TODO rather than raising an exception, kick the user over to defining the journal path
            throw new RuntimeException("Config file found, but was empty!");
        }

        Path journalDirpath = Paths.get(configLines.get(0));
        if (!Files.isDirectory(journalDirpath)) {
            // TODO kick user over to flow of setting config file properly
            throw new RuntimeException(
                    String.format(
                            "Journal directory specified in config file '%s' is not a directory",
                            journalDirpath
                    )
            );
        }
        return journalDirpath;
    }
}
